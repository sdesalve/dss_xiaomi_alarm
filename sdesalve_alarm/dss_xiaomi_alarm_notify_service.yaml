script:
### 12.0.0 aggiunte chiamate VoIP in caso di Allarme.
### questo l'add-on da installare https://github.com/sdesalve/hassio-addons/tree/master/dss_voip
  dss_alarm_script_esegui_chiamata_voip:
    sequence:
      - service: hassio.addon_stdin
        data_template:
          #### ID del container ufficiale da utilizzare
          # addon: local_dss_voip
          addon: 89275b70_dss_voip 
          input: {"call_sip_uri":"sip:501@pbxes.org","message_tts":"{{ message }}"}
      - service: hassio.addon_stdin
        data_template:
          #### ID del container ufficiale da utilizzare
          # addon: local_dss_voip
          addon: 89275b70_dss_voip 
          input: {"call_sip_uri":"sip:520@pbxes.org","message_tts":"{{ message }}"}

  dss_alarm_script_invia_notifiche:
    sequence:
      - service: notify.notifiche_telegram
        data_template: 
          message: "{{ message }}"
      - delay: '00:00:05'
      # - service: notify.notifiche_html5
        # data_template:
          # message: "{{ message | striptags }}"

  dss_alarm_script_invia_notifiche_telegram_con_keyboard:
    sequence:
      - service: notify.notifiche_telegram
        data_template: 
          message: "{{ message }}"
          data:
              inline_keyboard: 
                - '{% if elenco_luci_accese | trim != "" and elenco_clima_accesi | trim != "" %}Spegni tutto:/orla_telegram_chk_clima_luci_spegni {% elif elenco_luci_accese | trim != "" %}{{ "\U0001F4A1" }} Spegni luci:/orla_telegram_chk_luci_spegni {% elif elenco_clima_accesi | trim != "" %}{{ "\U00002744" }} Spegni clima:/orla_telegram_chk_clima_spegni {% else %}{{ "\U00002744" }} Luci e Climatizzatori spenti:/removekeyboard{% endif %}'
      # - service: notify.notifiche_html5
        # data_template:
          # message: "{{ message | striptags }}"
          # data:
            # requireInteraction: true
            # tag: notifiche_html5_allarme
            # actions: 
              # - action: orla_html5_chk_clima_luci_spegni
                # title: 💡 Spegni tutto
              # - action: orla_html5_chk_remove_keyboard
                # title: ⛔️ Ignora 
              # # {% if elenco_luci_accese | trim != "" or elenco_clima_accesi | trim != "" %}
              # # {% endif %}

  orla_telegram_spegni_luci_rimaste_accese:
    sequence:
      - service: light.turn_off
        data_template:
          entity_id: >
            {%- macro controllo_luci() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_luci_accese_home', 'options') -%}
            {% for item in expand(states['light']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') -%}{{ item.entity_id}}{%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            {%- endmacro -%}
            {{ controllo_luci() }}
      - service: switch.turn_off
        data_template:
          entity_id: >
            {%- macro controllo_switch() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_luci_accese_home', 'options') -%}
            {% for item in expand(states['switch']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') -%}{{ item.entity_id}}{%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            {%- endmacro -%}
            {{ controllo_switch() }}
          
  orla_telegram_spegni_clima_rimasti_accesi:
    sequence:
      - service: climate.turn_off
        data_template:
          entity_id: >
            {%- macro controllo_clima() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_clima_acceso_away', 'options') -%}
            {% for item in expand(states['climate']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') -%}{{ item.entity_id}}{%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            {%- endmacro -%}
            {{ controllo_clima() }}
          
group:
  dss_notifiche_allarme:
    name: "Notifiche Telegram"
    icon: mdi:message-alert
    entities:
      - automation.notifica_allarme_armato_in_modalita_away
      - automation.notifica_allarme_armato_in_modalita_home
      - automation.notifica_allarme_disarmato
      - automation.notifica_che_qualcuno_e_rientrato
      - automation.notifica_che_gli_utenti_sono_usciti
      
automation:
  - alias: "Invia notifica se innescato HOME"
    initial_state: true
    trigger:
      - platform: state
        from: 'off'
        to: 'on'
        entity_id: !secret sensori_che_fanno_scattare_allarme_home_mode
    condition:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: armed_home
    action:
      - service: script.dss_alarm_script_invia_notifiche
        data_template:
          message: >-
           ALLARME Intrusione!
           
           <strong>{{ trigger.to_state.attributes.friendly_name }}</strong> è stata aperta
### 12.0.0 aggiunte chiamate VoIP in caso di Allarme.
### questo l'add-on da installare https://github.com/sdesalve/hassio-addons/tree/master/dss_voip
### se non lo utilizzi puoi anche commentare la seguente chiamata script.dss_alarm_script_esegui_chiamata_voip
      - service: script.dss_alarm_script_esegui_chiamata_voip
        data_template:
          message: >-
           ALLARME Intrusione! {{ trigger.to_state.attributes.friendly_name }} è stata aperta

  - alias: "Invia notifica se innescato AWAY"
    initial_state: true
    trigger:
      - platform: state
        from: 'off'
        to: 'on'
        entity_id: !secret sensori_che_fanno_scattare_allarme_away_mode
    condition:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: armed_away
    action:
      - service: script.dss_alarm_script_invia_notifiche
        data_template:
          message: >-
           ALLARME Intrusione!
           
           <strong>{{ trigger.to_state.attributes.friendly_name }}</strong> è stata aperta
### 12.0.0 aggiunte chiamate VoIP in caso di Allarme.
### questo l'add-on da installare https://github.com/sdesalve/hassio-addons/tree/master/dss_voip
### se non lo utilizzi puoi anche commentare la seguente chiamata script.dss_alarm_script_esegui_chiamata_voip
      - service: script.dss_alarm_script_esegui_chiamata_voip
        data_template:
          message: >-
           ALLARME Intrusione! {{ trigger.to_state.attributes.friendly_name }} è stata aperta

  ### Sending a notification when the alarm is Arm###
  - alias: "NOTIFICA Allarme armato in modalità AWAY"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'armed_away'
    action:
### questi sono i componenti che mandano le notifiche - controllare i nomi dei propri servizi di notifica ###
      - service: script.dss_alarm_script_invia_notifiche_telegram_con_keyboard
        data_template:
          message: >-
            <strong>ATTIVATO Allarme - AWAY Mode.</strong>
            {%- macro controllo_sensori() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') -%}
            {%- set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] -%}
            {%- for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on' and item.attributes['device_class'] in device_types) %}
            
            🚪 {{ item.name}}
            {%- endfor -%}
            {% endmacro -%}
            {% set elenco_infissi = controllo_sensori() %}
            {% if elenco_infissi |trim == "" %}
            
            
            Tutti gli infissi sono chiusi
            {% else %}
            
            
            ATTENZIONE: i seguenti infissi sono rimasti aperti:
            {{ elenco_infissi }}
            {% endif %}
            
            {%- macro controllo_luci() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_luci_accese_away', 'options') -%}
            {%- for item in expand(states['light'], states['switch']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') %}
            
            💡 {{ item.name}}
            {%- endfor -%}
            {%- endmacro -%}
            {%- set elenco_luci = controllo_luci() -%}
            {% if elenco_luci |trim == "" %}
            
            
            Tutti le luci sono spente
            {% else %}
            
            
            ATTENZIONE: le seguenti luci sono rimaste accese:
            {{ elenco_luci }}
            {% endif %}
            
            {%- macro controllo_clima() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_clima_acceso_away', 'options') -%}
            {%- for item in expand(states['climate']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') %}
            
            ❄️ {{ item.name}}
            {%- endfor -%}
            {%- endmacro -%}
            {% set elenco_clima = controllo_clima() %}
            {% if elenco_clima |trim == "" %}
            
            
            Tutti i climatizzatori sono spenti
            {% else %}
            
            
            ATTENZIONE: i seguenti climatizzatori sono rimasti accesi:
            {{ elenco_clima }}
            {% endif %}
          elenco_clima_accesi: >-
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_clima_acceso_away', 'options') -%}
            {% for item in expand(states['climate']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') -%}
            {{ item.name }}{%- if not loop.last %}, {% endif %}
            {%- endfor -%}
          elenco_luci_accese: >-
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_luci_accese_away', 'options') -%}
            {% for item in expand(states['light'], states['switch']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') -%}{{ item.entity_id}}{%- if not loop.last %}, {% endif %}
            {%- endfor -%}

      - service: script.dss_light_flash_cancel
      - service: script.dss_light_flash_cancel_away

      ### Sending a notification when the alarm is Arm###
  - alias: "NOTIFICA Allarme armato in modalità HOME"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'armed_home'
    action:
### questi sono i componenti che mandano le notifiche - controlla i nomi dei propri servizi di notifica ###
      - service: script.dss_alarm_script_invia_notifiche_telegram_con_keyboard
        data_template:
          message: >-
            <strong>ATTIVATO Allarme - HOME Mode.</strong>
            {%- macro controllo_sensori() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_home', 'options') -%}
            {%- set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] -%}
            {%- for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on' and item.attributes['device_class'] in device_types) %}
            
            🚪 {{ item.name}}
            {%- endfor -%}
            {% endmacro -%}
            {% set elenco_infissi = controllo_sensori() %}
            {% if elenco_infissi |trim == "" %}
            
            
            Tutti gli infissi sono chiusi
            {% else %}
            
            
            ATTENZIONE: i seguenti infissi sono rimasti aperti:
            {{ elenco_infissi }}
            {% endif %}
            
            {%- macro controllo_luci() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_luci_accese_home', 'options') -%}
            {%- for item in expand(states['light'], states['switch']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') %}
            
            💡 {{ item.name}}
            {%- endfor -%}
            {%- endmacro -%}
            {%- set elenco_luci = controllo_luci() -%}
            {% if elenco_luci |trim == "" %}
            
            
            Tutti le luci sono spente
            {% else %}
            
            
            ATTENZIONE: le seguenti luci sono rimaste accese:
            {{ elenco_luci }}
            {% endif %}
            
            {%- macro controllo_clima() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_clima_acceso_home', 'options') -%}
            {%- for item in expand(states['climate']) if (item.name not in exclusions and item.entity_id not in exclusions and item.state == 'on') %}
            
            ❄️ {{ item.name}}
            {%- endfor -%}
            {%- endmacro -%}
            {% set elenco_clima = controllo_clima() %}
            {% if elenco_clima |trim == "" %}
            
            
            Tutti i climatizzatori sono spenti
            {% else %}
            
            
            ATTENZIONE: i seguenti climatizzatori sono rimasti accesi:
            {{ elenco_clima }}
            {% endif %}
      - service: script.dss_light_flash_cancel
      - service: script.dss_light_flash_cancel_away

  ### Sending a notification when the alarm is Arm###
  - alias: "NOTIFICA Allarme disarmato"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'disarmed'
    action:
      - service: script.dss_alarm_script_invia_notifiche
        data:
          message: "Allarme DISINSERITO!"
          
  - alias: "NOTIFICA che qualcuno è rientrato"
    initial_state: true
    trigger:
      # - platform: state
        # entity_id: [group.dss_dispositivi_user1, group.dss_dispositivi_user2]
        # # entity_id: [group.dss_dispositivi_user1, group.dss_dispositivi_user2, group.dss_dispositivi_user3, group.dss_dispositivi_user4]
        # from: 'not_home'
        # to: 'home'
        # for:
          # seconds: 15
      - platform: state
        entity_id: group.dss_dispositivi_user1
        from: 'not_home'
        to: 'home'
        for:
          seconds: 10
      - platform: state
        entity_id: group.dss_dispositivi_user2
        from: 'not_home'
        to: 'home'
        for:
          seconds: 10
# da notare che le condizioni sono 2 ed uso l'operatore OR. SOLO UNA delle due condizioni può essere vera, il trigger infatti è in contrasto e funziona perché ho solo 2 gruppi tracciati
    # condition:
      # - condition: template
        # value_template: >-
          # {{ is_state('group.dss_dispositivi_user1', 'not_home') or is_state('group.dss_dispositivi_user2', 'not_home') }}
    condition:
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: group.dss_dispositivi_user1
                state: 'home'
              - condition: state
                entity_id: group.dss_dispositivi_user2
                state: 'not_home'
          - condition: and
            conditions:
              - condition: state
                entity_id: group.dss_dispositivi_user1
                state: 'not_home'
              - condition: state
                entity_id: group.dss_dispositivi_user2
                state: 'home'
# ### se hai più di 2 gruppi di dispositivi INVECE devi usare questo sistema:
    # condition:
      # condition: or
      # conditions:
        # - condition: template
          # value_template: >-
            # {{ is_state('group.dss_dispositivi_user1', 'home') and is_state('group.dss_dispositivi_user2', 'not_home') and is_state('group.dss_dispositivi_user3', 'not_home') and is_state('group.dss_dispositivi_user4', 'not_home') }}
        # - condition: template
          # value_template: >-
            # {{ is_state('group.dss_dispositivi_user2', 'home') and is_state('group.dss_dispositivi_user1', 'not_home') and is_state('group.dss_dispositivi_user3', 'not_home') and is_state('group.dss_dispositivi_user4', 'not_home') }}
        # - condition: template
          # value_template: >-
            # {{ is_state('group.dss_dispositivi_user3', 'home') and is_state('group.dss_dispositivi_user1', 'not_home') and is_state('group.dss_dispositivi_user2', 'not_home') and is_state('group.dss_dispositivi_user4', 'not_home') }}
        # - condition: template
          # value_template: >-
            # {{ is_state('group.dss_dispositivi_user4', 'home') and is_state('group.dss_dispositivi_user1', 'not_home') and is_state('group.dss_dispositivi_user2', 'not_home') and is_state('group.dss_dispositivi_user3', 'not_home') }}
    action:
      - condition: template
        value_template: >- 
          {%- macro controlla_dispositivo_rientrato_non_escluso_dai_tracciati() -%}
          {%- for each_entity in trigger.to_state.attributes.entity_id if (each_entity.state == 'on' or each_entity.state == 'home') and each_entity not in expand('group.dss_dispositivi_tracciati') -%}
            {{ each_entity.entity_id }}{%- if not loop.last %},{% endif %}
          {%- endfor -%}
          {%- endmacro -%}
          {{ controlla_dispositivo_rientrato_non_escluso_dai_tracciati() | trim == "" }}
      - service: script.dss_alarm_script_invia_notifiche
        data_template: 
          message: >-
            <strong>{{ trigger.to_state.attributes.friendly_name | replace( "Dispositivi ","") }}</strong> è rientrato/a nella casa!
            {% if is_state('input_boolean.dss_sospesa_attivazione_automatica', 'on') %}
            
            Ripristinata l'attivazione automatica dell'allarme...
            {% endif %}

  - alias: "NOTIFICA che gli utenti sono usciti"
    initial_state: true
    trigger:
      - platform: state
        entity_id: [group.dss_dispositivi_user1, group.dss_dispositivi_user2]
        # entity_id: [group.dss_dispositivi_user1, group.dss_dispositivi_user2, group.dss_dispositivi_user3, group.dss_dispositivi_user4]
        from: 'home'
        to: 'not_home'
        for:
          minutes: 2
    condition:
      - condition: template
        value_template: >-
          {{ is_state('group.dss_dispositivi_user1', 'not_home') and is_state('group.dss_dispositivi_user2', 'not_home') }}
        # value_template: >-
          # {{ is_state('group.dss_dispositivi_user1', 'not_home') and is_state('group.dss_dispositivi_user2', 'not_home') and is_state('group.dss_dispositivi_user3', 'not_home') and is_state('group.dss_dispositivi_user4', 'not_home') }}
    action:
      - condition: template
        value_template: >- 
          {%- macro controllo_dispositivo_rientrato() -%}
          {%- for entity in trigger.to_state.attributes.entity_id if states(entity) == 'off' and entity in expand('group.dss_dispositivi_tracciati') -%}
            {{ entity.entity_id }}{%- if not loop.last %},{% endif %}
          {%- endfor -%}
          {%- endmacro -%}
          {{ controllo_dispositivo_rientrato() | trim == "" }}
      - service: script.dss_alarm_script_invia_notifiche
        data_template :
          message: >-
            <strong>{{ trigger.to_state.attributes.friendly_name | replace( "Dispositivi ","") }}</strong> ha abbandonato per ultimo la casa!
            {% if is_state('input_boolean.dss_sospesa_attivazione_automatica', 'on') %}
            
            <strong>Sospesa l'attivazione automatica dell'allarme...</strong>
            {% elif is_state('automation.attivazione_automatica_se_dispositivi_non_in_casa', 'on') and is_state('alarm_control_panel.home_alarm', 'disarmed') %}
            
            Tra pochi minuti verrà inserito automaticamente l'allarme.
            {% endif %}

  - id: orla_telegram_chk_luci_spegni
    alias: "Telegram chk luci spegni"
    initial_state: true
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: "/orla_telegram_chk_luci_spegni"
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: "{{ trigger.event.data.id }}"
          message: "OK ci penso io"
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.message.chat.id }}'
          inline_keyboard: []
      - service: script.orla_telegram_spegni_luci_rimaste_accese
      - service: notify.notifiche_telegram
        data_template:
          message: "OK ci ho pensato io, ho spento tutte le luci accese!"

  - id: orla_telegram_chk_clima_spegni
    alias: "Telegram chk clima spegni"
    initial_state: true
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: "/orla_telegram_chk_clima_spegni"
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: "{{ trigger.event.data.id }}"
          message: "OK ci penso io"
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.message.chat.id }}'
          inline_keyboard: []
      - service: script.orla_telegram_spegni_clima_rimasti_accesi
      - service: notify.notifiche_telegram
        data_template:
          message: "OK ci ho pensato io, ho spento tutti i climatizzatori accesi!"

  - id: orla_telegram_chk_clima_luci_spegni
    alias: "Telegram chk clima luci spegni"
    initial_state: true
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/orla_telegram_chk_clima_luci_spegni"
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: "{{ trigger.event.data.id }}"
          message: "OK ci penso io"
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.message.chat.id }}'
          inline_keyboard: []
      - service: script.orla_telegram_spegni_clima_rimasti_accesi
      - service: script.orla_telegram_spegni_luci_rimaste_accese
      - service: notify.notifiche_telegram
        data_template:
          message: "OK ci ho pensato io, ho spento tutto!"

  - id: orla_telegram_chk_remove_keyboard
    alias: "Telegram callback to remove keyboard"
    initial_state: true
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/removekeyboard'
    action:
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'OK'
      - service: telegram_bot.edit_replymarkup
        data_template:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.message.chat.id }}'
          inline_keyboard: []

  # - id: orla_html5_chk_clima_luci_spegni
    # alias: "HTML5 Push chk clima luci spegni"
    # initial_state: true
    # trigger:
      # - platform: event
        # event_type: html5_notification.clicked
        # event_data:
          # action: orla_html5_chk_clima_luci_spegni
    # action:
      # # - service: script.orla_telegram_spegni_clima_rimasti_accesi
      # - service: script.orla_telegram_spegni_luci_rimaste_accese
      # - service: notify.notifiche_html5
        # data_template:
          # message: "OK ci ho pensato io, ho spento tutto!"

  # - id: orla_html5_chk_remove_keyboard
    # alias: "HTML5 Push callback to remove keyboard"
    # initial_state: true
    # trigger:
      # - platform: event
        # event_type: html5_notification.clicked
        # event_data:
          # action: orla_html5_chk_remove_keyboard
    # action:
      # - service: notify.notifiche_html5
        # data_template:
          # message: "OK ignoro!"
      # - service: notify.html5_dismiss
        # data_template:
          # data:
            # tag: "notifiche_html5_allarme"
