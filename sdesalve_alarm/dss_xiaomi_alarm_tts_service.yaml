### v10.8 sostituite notifiche TTS con alexa_media_player https://github.com/keatontaylor/alexa_media_player
### righe da decommentare e personalizzare
  
# alexa_media:
  # accounts:
    # - email: !secret alexa_email
      # password: !secret alexa_password
      # url: amazon.it
      # exclude_devices:
      # - "Questo dispositivo"
      
# notify:
  # - platform: alexa_media
    # name: alexa_media

homeassistant: 
  customize:
    script.dss_voice_riproduci_messaggio_tts:
      hidden: true

input_number:
  dss_tts_volume_day:
    name: "Volume TTS Giorno"
    icon: mdi:volume-high
    initial: 45
    min: 0
    max: 100
    step: 5

  dss_tts_volume_night:
    name: "Volume TTS Notte"
    icon: mdi:volume-high
    initial: 30
    min: 0
    max: 100
    step: 5

group:
  dss_avvisi_tts:
    name: "Avvisi TTS Allarme"
    icon: mdi:settings
    entities:
      - automation.avviso_tts_allarme_disarmato
      - automation.avviso_tts_allarme_home_attivato
      - automation.avviso_tts_allarme_away_attivato
      - automation.avviso_tts_allarme_in_attivazione
      - automation.avviso_tts_allarme_in_innesco
      - automation.avviso_tts_allarme_in_innesco_sensori_ritardati_away
      - automation.avviso_tts_allarme_in_innesco_sensori_ritardati_home
      - automation.avviso_tts_allarme_innescato
      - input_number.dss_tts_volume_day
      - input_number.dss_tts_volume_night

script:
  dss_voice_riproduci_messaggio_tts:
    sequence:
      - condition: or
        conditions:
    ### v11.9 Aggiunti volume TTS Giorno e Notte. Se = 0 non vengono riprodotti nella fascia oraria corrispondente i messaggi TTS
        - condition: template
          value_template: "{{ is_state('binary_sensor.dss_mode_giorno', 'on') and states('input_number.dss_tts_volume_day') | int > 0 }}"
        - condition: template
          value_template: "{{ is_state('binary_sensor.dss_mode_giorno', 'off') and states('input_number.dss_tts_volume_night') | int > 0 }}"

  ### v10.2 notifiche TTS Amazon Alexa: 
  #queste le modifiche da fare allo script scaricabile da https://github.com/walthowd/ha-alexa-tts
  # LANGUAGE="it-IT"
  # AMAZON='amazon.it'
  # ALEXA='alexa.amazon.it'

      # - service: notify.alexa_echo
        # data_template:
          # message: "{{ message }}"

  ### alexa_media_player https://github.com/keatontaylor/alexa_media_player vedi sopra come configurarlo
      - service: media_player.volume_set
        data_template: 
          entity_id: !secret entity_amazon_echo_id
          volume_level: >-
            {% if is_state('binary_sensor.dss_mode_giorno', 'on') %}
            {{ (states('input_number.dss_tts_volume_day') | float / 100) | round(1) }}
            {% else %}
            {{ (states('input_number.dss_tts_volume_night') | float / 100) | round(1) }}
            {% endif %}
      - service: notify.alexa_media
        data_template:
          message: "{{ message }}"
          target: !secret entity_amazon_echo_id
          #title: "My title for Echo show"
          data:
            type: announce
            #method: all
            
  # # classico Google TTS
      # - service: media_player.volume_set
        # data_template: 
          # entity_id: media_player.ingresso
          # volume_level: >-
            # {% if is_state('binary_sensor.dss_mode_giorno', 'on') %}
            # {{ (states('input_number.dss_tts_volume_day') | float / 100) | round(1) }}
            # {% else %}
            # {{ (states('input_number.dss_tts_volume_night') | float / 100) | round(1) }}
            # {% endif %}
      # - service: tts.google_translate_say
        # entity_id: media_player.ingresso
        # data_template:
          # language: it
          # message: "{{ message }}"

  ### v9.2 rimosso Google Assistant Web Server: prima del messaggio riproduceva "Broadcast from MIONOME"
  ### vedi https://community.home-assistant.io/t/community-hass-io-add-on-google-assistant-webserver-broadcast-messages-without-interrupting-music/37274/476
      # - service: notify.notifiche_tts
        # data_template:
          # message: "{{ message }}"


automation:
  - alias: "Avviso TTS Allarme disarmato"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'disarmed'
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Allarme disattivato..."

  - alias: "Avviso TTS Allarme HOME attivato"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'armed_home'
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Allarme perimetrale attivo."

  - alias: "Avviso TTS Allarme AWAY attivato"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'armed_away'
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Allarme attivo."

  - alias: "Avviso TTS Allarme in attivazione"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        from: 'disarmed'
        to: 'pending' #'arming'
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Attivazione in corso..."

  - alias: "Avviso TTS Allarme in innesco"
    initial_state: true
    trigger:
      #inutile l'avviso che sta per scattare l'allarme in caso di allarme HOME. Inizia a suonare subito!
      # - platform: state
        # entity_id: alarm_control_panel.home_alarm
        # from: 'armed_home'
        # to: 'pending'
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        from: 'armed_away'
        to: 'pending'
    action:
      - condition: template
        value_template: "{{ not is_state('alarm_control_panel.home_alarm', 'disarmed') }}"
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Sta per scattare l'Allarme"

  - alias: "Avviso TTS Allarme in innesco sensori ritardati AWAY"
    initial_state: true
    trigger:
      - platform: state
        from: 'off'
        to: 'on'
        entity_id: !secret entity_sensore_innesco_ritardato_allarme_away
    action:
      - condition: template
        value_template: "{{ is_state('alarm_control_panel.home_alarm', 'armed_away') }}"
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Sta per scattare l'Allarme"

  - alias: "Avviso TTS Allarme in innesco sensori ritardati HOME"
    initial_state: true
    trigger:
      - platform: state
        from: 'off'
        to: 'on'
        entity_id: !secret entity_sensore_innesco_ritardato_allarme_home
    action:
      - condition: template
        value_template: "{{ is_state('alarm_control_panel.home_alarm', 'armed_home') }}"
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Sta per scattare l'Allarme"

  - alias: "Avviso TTS Allarme innescato"
    initial_state: true
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'triggered'
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Attenzione, allarme intrusione!... Attenzione, allarme intrusione!... Attenzione, allarme intrusione!... "

### questo script controlla gli infissi aperti all'atto dell'attivazione e li comunica
  - alias: "Elenca infissi aperti su click pulsanti HOME"
    initial_state: false
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          click_type: single
          entity_id: !secret entity_pulsante_attiva_allarme_home
    condition:
      - condition: template
        value_template: >
          {%- macro controllo_sensori() -%}
          {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') -%}
          {%- set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] -%}
          {%- for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions) if (item.state == 'on' and item.attributes['device_class'] in device_types) -%}
          {{ item.name }}{% if not loop.last %}, {% endif %}
          {%- endfor -%}
          {% endmacro %}
          {{ controllo_sensori() | trim != "" }}
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data_template:
          message: >-
            I seguenti infissi risultano aperti...
            {%- macro controllo_sensori() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') -%}
            {%- set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] -%}
            {%- for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions) if (item.state == 'on' and item.attributes['device_class'] in device_types) %}
            {{ item.name }}...
            {%- endfor -%}
            {% endmacro %}
            {{ controllo_sensori() }}

  - alias: "Elenca infissi aperti su click pulsanti AWAY"
    initial_state: false
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          click_type: single
          entity_id: !secret entity_pulsante_attiva_allarme_away
    condition:
      - condition: template
        value_template: >
          {%- macro controllo_sensori() -%}
          {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') -%}
          {%- set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] -%}
          {%- for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions) if (item.state == 'on' and item.attributes['device_class'] in device_types) -%}
          {{ item.name }}{% if not loop.last %}, {% endif %}
          {%- endfor -%}
          {% endmacro %}
          {{ controllo_sensori() | trim != "" }}
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data_template:
          message: >-
            I seguenti infissi risultano aperti...
            {%- macro controllo_sensori() -%}
            {%- set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') -%}
            {%- set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] -%}
            {%- for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions) if (item.state == 'on' and item.attributes['device_class'] in device_types) %}
            {{ item.name }}...
            {%- endfor -%}
            {% endmacro %}
            {{ controllo_sensori() }}

  - alias: "Conferma infissi chiusi su doppio click pulsante ingresso"
    initial_state: true
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          click_type: double
          entity_id: !secret entity_pulsante_attiva_allarme_away
    condition:
      - condition: template
        value_template: >
          {% macro controllo_sensori() %}
          {% set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') %}
          {% set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] %}
          {% for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions) if (item.state == 'on' and item.attributes['device_class'] in device_types) %}
          {{ item.name }}{% if not loop.last %}, {% endif %}
          {%- endfor %}
          {% endmacro %}
          {{ controllo_sensori() | trim == "" }}
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Infissi chiusi... Attivo allarme..."
      - delay:
          seconds: 5
      - service: alarm_control_panel.alarm_arm_away
        data:
          entity_id: alarm_control_panel.home_alarm     

  - alias: "Conferma infissi chiusi su doppio click pulsanti comodino"
    initial_state: true
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          click_type: double
          entity_id: !secret entity_pulsante_attiva_allarme_home
    condition:
      - condition: template
        value_template: >
          {% macro controllo_sensori() %}
          {% set exclusions = state_attr('input_select.dss_binary_sensor_secrets_ignora_controllo_infissi_chiusi_away', 'options') %}
          {% set device_types = ['door', 'garage_door', 'lock', 'opening', 'window'] %}
          {% for item in expand(states['binary_sensor']) if (item.name not in exclusions and item.entity_id not in exclusions) if (item.state == 'on' and item.attributes['device_class'] in device_types) %}
          {{ item.name }}{% if not loop.last %}, {% endif %}
          {%- endfor %}
          {% endmacro %}
          {{ controllo_sensori() | trim == "" }}
    action:
      - service: script.dss_voice_riproduci_messaggio_tts
        data:
          message: "Infissi chiusi... Attivo allarme perimetrale..."
      - delay:
          seconds: 5
      - service: alarm_control_panel.alarm_arm_home
        data:
          entity_id: alarm_control_panel.home_alarm     
